const reactionRoles = require('../features/reactionRoles.js');
const logger = require('../features/logging.js');
const { serversServed, prefix } = require('../../configurations/config.json');

/* example categoryData with explanations:
category name: {
    desc: category description
    limitToOne: boolean, whether users are limited to one role from this category
    roles: {
        roleId: {
            roleName: role name
            alts: array of alternative names, commands will always be simplified to lowercase without spaces,
                underscores or dashes, and the role name is automatically added as well
            desc: role description
        },
    },
}, */

const categoryData = {
    'Godville Guilds': {
        desc: 'Get a role for your guild in the game to recognise other members of your guild. You can only have one guild role at a time.',
        limitToOne: true,
        roles: {
            '1170567901217038416': {
                roleName: 'Discordia',
            },
            '1170568266566086727': {
                roleName: 'Bloobiedoop',
            },
            '1170568795056775198': {
                roleName: 'Woopdeeboop',
            },
        },
    },
};

// generated by load()
const refs = {};

// setup obtainable roles and their names
function load(client) {
    // add roles from reactionRoles to categoryData
    loadReactionRoles();

    // add role names and alts to refs
    Object.entries(categoryData).forEach(([categoryName, category]) => {
        Object.entries(category.roles).forEach(([roleId, roleObj]) => {
            // add role name as alt
            const alts = roleObj.alts || [];
            alts.push(roleObj.roleName);

            // add discord role name as alt
            const guild = client.guilds.cache.get(serversServed.godvilleServer);
            const discordRole = guild.roles.cache.get(roleId);
            if (discordRole) alts.push(discordRole.name);

            // add alts to refs in simplified form (lowercase, no spaces, underscores or dashes)
            alts.forEach((alt) => {
                refs[alt.toLowerCase().replace(/[\s-_]/g, '')] = {
                    category: categoryName,
                    roleId: roleId,
                };
            });
        });
    });
}

function getRole(message, content) {
    if (!content) {
        message.reply(`Please specify a role to get.\nUse \`${prefix}listroles\` to list available roles.`);
        return;
    }

    const roleRequest = content.toLowerCase().replace(/[\s-_]/g, '');

    // check if role exists
    if (!refs[roleRequest]) {
        message.reply(`Role ${content} (${roleRequest}) not found.`);
        return;
    }

    const { category, roleId } = refs[roleRequest];
    const roleName = categoryData[category].roles[roleId].roleName;
    const guildMember = message.member;

    // always remove if user has this role
    if (guildMember.roles.cache.has(roleId)) {
        guildMember.roles.remove(roleId).catch(err => {
            message.reply(`I was unable to add the ${content} role to you. Please ask a moderator for help.`);
            logger.log(`Failed to add ${guildMember.user.tag} to ${roleName} (${roleId}) role: ${err}`);
            return;
        });
        message.reply(`You have been removed from the ${content} role.`);
        logger.log(`Removed ${guildMember.user.tag} from ${roleName} (${roleId}) role.`);
        return;
    }

    // check if we need to remove other roles from this category
    if (categoryData[category].limitToOne) {
        Object.keys(categoryData[category].roles).forEach(id => {
            if (guildMember.roles.cache.has(id)) {
                const name = categoryData[category].roles[id].roleName;
                guildMember.roles.remove(id).catch(err => {
                    message.reply(`I was unable to add the ${content} role to you. Please ask a moderator for help.`);
                    logger.log(`Failed to add ${guildMember.user.tag} to ${roleName} (${roleId}) role: ${err}`);
                    return;
                });
                message.reply(`You have been removed from the ${name} role, as you can only have one role from the ${category} category.`);
                logger.log(`Removed ${guildMember.user.tag} from ${name} (${id}) role, as they can only have one role from the ${category} category.`);
                return;
            }
        });
    }

    // add requested role
    guildMember.roles.add(roleId).catch(err => {
        message.reply(`I was unable to add the ${content} role to you. Please ask a moderator for help.`);
        logger.log(`Failed to add ${guildMember.user.tag} to ${roleName} (${roleId}) role: ${err}`);
        return;
    });
    message.reply(`You have been assigned the ${content} role.`);
    logger.log(`Added ${guildMember.user.tag} to ${content} (${roleId}) role.`);
}

// list all obtainable roles
function listRoles(message, category) {
    // if no category is specified, list all categories
    if (!category) {
        const categories = Object.keys(categoryData);
        message.channel.send(`### Available categories:\n* ${categories.join('\n* ')}`
            + `\n\nUse \`${prefix}listroles <category>\` to list available roles in a category.`
            + ' Text case, spaces, underscores and hyphens are ignored when matching categories.');
        return;
    }

    // match categories disregarding case, spaces, underscores and hyphens
    const cleanCategory = category.toLowerCase().replace(/[\s-_]/g, '');
    const matchingCategory = Object.keys(categoryData).find(key => {
        return key.toLowerCase().replace(/[\s-_]/g, '') === cleanCategory;
    });

    if (!matchingCategory) {
        message.reply(`Category ${category} (${cleanCategory}) not found.`);
        return;
    }

    const { desc, roles } = categoryData[matchingCategory];
    const roleTexts = Object.values(roles).map(role => `* __${role.roleName}__` + (role.desc ? `: *${role.desc}*` : ''));
    message.channel.send(`### ${matchingCategory} roles:\n${desc}\n${roleTexts.join('\n')}`
        + `\n\nUse \`${prefix}getrole <role>\` to get a role.`
        + ' Text case, spaces, underscores and hyphens are ignored when matching roles.');
}

// add categories and roles from reactionRoles to categoryData
function loadReactionRoles() {
    Object.values(reactionRoles.categories).forEach((category) => {
        // only add categories that are through >getrole
        if (category.availableAsCommand) {
            // discard category key, it's the message id for the reaction role message
            categoryData[category.name] = {
                desc: category.desc,
                limitToOne: category.limitToOne,
                roles: {},
            };

            Object.entries(category.roles).forEach(([roleReaction, roleObj]) => {
                // copy alts or initialise empty array, add reaction role emoji as an alt
                const alts = roleObj.alts || [];
                alts.push(roleReaction);
                // discard role key as it becomes an alt
                categoryData[category.name].roles[roleObj.roleId] = {
                    roleName: roleObj.fullName,
                    alts,
                    desc: roleObj.desc,
                };
            });
        }
    });
}

exports.get = getRole;
exports.list = listRoles;
exports.setup = load;